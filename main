from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

class Fruit(BaseModel):
    id: int
    name: str
    color: str
    price: float  # Price as float
    qty: int      # Quantity as int

class PurchaseOrder(BaseModel):
    fruit_name: str
    quantity: int

fruit_data = []  # This is where the fruit is stored
purchased_orders: List[PurchaseOrder] = []  # This will store the purchase orders

@app.get("/")
async def read_root():
    return {"Hello": "World"}

@app.get("/fruit/view")
async def view_fruit_table():
    if fruit_data:
        return {"fruits": fruit_data}
    return {"message": "No fruits available in the table."}

@app.post("/fruit")
async def post_fruit(fruit: Fruit):
    fruit_data.append(fruit)  # Store the fruit in the list
    return {"message": "Fruit added successfully", "fruit": fruit}

@app.post("/buyfruit/{fruit_id}")
async def buy_fruit(fruit_id: int, quantity: int):
    for fruit in fruit_data:
        if fruit.id == fruit_id:
            if fruit.qty >= quantity:
                fruit.qty -= quantity  # Decrease the quantity
                
                # Create a purchase order
                purchase_order = PurchaseOrder(fruit_name=fruit.name, quantity=quantity)
                purchased_orders.append(purchase_order)  # Store the purchase order
                
                return {
                    "message": "Successfully purchased",
                    "purchasedFruit": {
                        "name": fruit.name,
                        "quantity": quantity
                    }
                }
            else:
                raise HTTPException(status_code=400, detail="Insufficient stock")
    raise HTTPException(status_code=404, detail="Fruit not found")

@app.get("/purchases")
async def view_purchases():
    if purchased_orders:
        return {"purchased_orders": purchased_orders}
    return {"message": "No purchases have been made."}

@app.delete("/fruit/clear")
async def clear_fruit_table():
    fruit_data.clear()  # Clear the fruit data list
    return {"message": "The fruit basket has been emptied."}
